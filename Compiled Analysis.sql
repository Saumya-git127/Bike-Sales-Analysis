/*--------------------------------------------------------------------------------------------------------------------------------------------
	DATES EXPLORATION
--------------------------------------------------------------------------------------------------------------------------------------------*/

-- first and last orders
SELECT MIN(order_date), MAX(order_date), ABS(ROUND(DATEDIFF(MIN(order_date), MAX(order_date))/365)) as order_range_year
FROM fact_sales; -- 3 years

-- Youngest and oldest customer
SELECT 
min(birthdate) as oldest_birthdate, 
ROUND(DATEDIFF(CURDATE(), MIN(birthdate))/365) AS Oldest_age,
max(birthdate) as youngest_customers,
ROUND(DATEDIFF(CURDATE(), MAX(birthdate))/365) AS Youngest_age
FROM dim_customers;


/*--------------------------------------------------------------------------------------------------------------------------------------------
	DATABASE EXPLORATION
--------------------------------------------------------------------------------------------------------------------------------------------*/

-- DIMENSION EXPLORATION
-- Explore all the countries our customers comme from

select distinct country from dim_customers;

-- Explore all the categories "The major divisions"

SELECT DISTINCT category, subcategory, product_name
FROM dim_products
ORDER BY 1, 2, 3;


/*--------------------------------------------------------------------------------------------------------------------------------------------
	MAGNITUDE- Compare the measure values by categories 
--------------------------------------------------------------------------------------------------------------------------------------------*/


-- Find total customers by countries 
select country, count(customer_key) as total_customers
from dim_customers
group by country
order by 2 desc;


-- Find total customers by gender
select gender, count(customer_key) as total_customers
from dim_customers
group by gender
order by 2 desc;


-- Find total products by category
select category, count(product_key) as total_products
from dim_products
group by category
order by 2 desc;


-- What is the average costs in each category?
select category, avg(cost) as average_cost
from dim_products
group by category
order by 2 desc;


-- What is the total revenue generated by each category?
select category, sum(sales_amount) as total_revenue
from fact_sales s
left join dim_products p 
on p.product_key = s.product_key
group by category
order by 2 desc;

-- Find total revenue generated by each customer
select c.customer_key, c.first_name, c.last_name, sum(sales_amount) as total_revenue
from fact_sales s
left join dim_customers c
on s.customer_key = c.customer_key
group by c.customer_key, c.first_name, c.last_name
order by 4 desc;

-- What is the distribution of sold items across countries?
select country, count(quantity) as total_sold_items
from fact_sales s
left join dim_customers c
on s.customer_key = c.customer_key
group by country
order by 2 desc; 


/*--------------------------------------------------------------------------------------------------------------------------------------------
	 MEASURES EXPLORATION
--------------------------------------------------------------------------------------------------------------------------------------------*/

-- Find the total sales
SELECT SUM(sales_amount) as total_sales
FROM fact_sales;


-- Find how many items are sold
SELECT SUM(quantity) as total_quantity
FROM fact_sales;


-- Find the average selling price 
SELECT AVG(price) as avg_price
FROM fact_sales;


-- Find the total number of orders
SELECT count(order_number)
FROM fact_sales;
SELECT count(distinct order_number) as total_orders
FROM fact_sales;


-- Find the total number of products
select count(distinct product_id) as total_products
from dim_products;


-- Find the total number of customers
SELECT COUNT(customer_key) as total_custommers
FROM dim_customers;


-- Find the total number of customers who have placed an order 
SELECT COUNT(DISTINCT customer_key) AS total_customers
FROM fact_sales;


/*--------------------------------------------------------------------------------------------------------------------------------------------
	 Generate a report that shows all key metrics of the buisness
--------------------------------------------------------------------------------------------------------------------------------------------*/

SELECT 'Total Sales' as measure_name, SUM(sales_amount) as measure_value FROM fact_sales
UNION ALL
SELECT 'Total Quantity' as measure_name, SUM(quantity) as measure_value FROM fact_sales
UNION ALL
SELECT 'Avg Price' as measure_name, AVG(price) as measure_value FROM fact_sales 
UNION ALL
SELECT 'Total Nr. Orders' as measure_name, count(distinct order_number) as measure_value FROM fact_sales 
UNION ALL
SELECT 'Total Nr. Products' as measure_name, count(distinct product_id) as measure_value FROM dim_products  
UNION ALL
SELECT 'Total Nr. Custommers' as measure_name, COUNT(customer_key) as measure_value FROM dim_customers ;


/* -------------------------------------------------------------------------------------------------------------------------------------------
    RANKING 
-------------------------------------------------------------------------------------------------------------------------------------------*/

-- Which 5 products generate the highest revenue?

select p.product_name, sum(s.sales_amount) as total_revenue
from fact_sales s
left join dim_products p
on s.product_key = p.product_key
group by product_name
order by 2 desc
limit 5;

select *
from
	(select p.product_name, sum(s.sales_amount) as total_revenue, row_number() over(order by sum(s.sales_amount) desc) as rnk
	from fact_sales s
	left join dim_products p
	on s.product_key = p.product_key
	group by product_name) t
where rnk<=5;

-- What are the 5 worst performing products in terms of sales?
select p.product_name, sum(s.sales_amount) as total_revenue
from fact_sales s
left join dim_products p
on s.product_key = p.product_key
group by product_name
order by 2 
limit 5;

-- Find the top 10 customers who have generated the highest revenue
select c.customer_key, c.first_name, c.last_name, sum(sales_amount) as total_revenue
from fact_sales s
left join dim_customers c
on s.customer_key = c.customer_key
group by c.customer_key, c.first_name, c.last_name
order by 4 desc
limit 10;

/* =========================================================================================================================================
	Change over time Trends
===========================================================================================================================================*/

-- Analyze Sales Performance over time
-- over the years
select 
Year(order_date) as year, 
sum(sales_amount) as total_sales, 
count(distinct customer_key) as total_customers,
sum(quantity) as total_quantity
from fact_sales
group by year(order_date)
order by 1;

-- over the months
select 
year(order_date) as year, 
month(order_date) as month, 
sum(sales_amount) as total_sales, 
count(distinct customer_key) as total_customers,
sum(quantity) as total_quantity
from fact_sales
group by year(order_date), month(order_date)
order by 1;


/*=========================================================================================================================================== 
	Cummulative Analysis
============================================================================================================================================*/

-- Calculate the total sales per momths
-- and the running total of sales over time

select
year(order_date) as order_year, 
month(order_date) as order_month,
Sum(sales_amount) as total_sales
from fact_sales
group by year(order_date), month(order_date)
order by 1;                                    -- total sales per month

with total_sales_per_month as (select
								year(order_date) as order_year, 
								month(order_date) as order_month,
								Sum(sales_amount) as total_sales
								from fact_sales
								group by year(order_date), month(order_date)
								order by 1)
select *, sum(total_sales) over( order by order_year, order_month) as cumm_sales
from total_sales_per_month;

-- by year
with total_sales_per_year as (select
							   year(order_date) as order_year, 						
							   Sum(sales_amount) as total_sales
							   from fact_sales
						       group by year(order_date)
							   order by 1)
select*, sum(total_sales) over(order by order_year) as cumm_sales
from total_sales_per_year;


-- moving average

with total_sales_per_year as (select
							   year(order_date) as order_year, 						
							   Sum(sales_amount) as total_sales,
                               round(avg(price)) as avg_price
							   from fact_sales
						       group by year(order_date)
							   order by 1)
select*, 
sum(total_sales) over(order by order_year) as cumm_sales,
round(avg(avg_price) over( order by order_year)) as moving_avg_price
from total_sales_per_year;



/* ==========================================================================================================================================
	DATA SEGMENTATION
                 - group the data based on a spaecific range
                 - helps understand the correlation between two measures
===========================================================================================================================================*/
			
-- Segment products into cost ranges and count how many products fall into each segment

select product_name, cost,
case when cost_range.buckets = 1 then "Expensive"
	 when cost_range.buckets = 2 then "Mid-range"
     when cost_range.buckets = 3 then "Cheaper"
END as `range`
from(
select *, ntile(3) over(order by cost desc) as buckets
from dim_products) cost_range ;


WITH cost_segments as (
			select product_key, product_name, cost,
				Case when cost < 100 then "Below 100"
					 when cost between 100 and 500 then "100-500"
					 when cost between 500 and 1000 then "500-1000"
					 when cost between 1000 and 2000 then "1000-2000"
					 when cost > 2000 then "Above 2000"
				End as cost_range
			from dim_products)
select cost_range, count(product_name) as total_product
from cost_segments
group by cost_range
order by 2 desc;


/* Group customers into three segments based on their spending behaviour:
		- VIP: Customers with at least 12 months of history and more than 5000
        - Regular: Customers with at least 12 months of history but spending 5000 or less
        - New: Customers with a lifespan less than 12 months
And find the total number of customers by each group 
*/

With customer_spending as (
							select 
								customer_id, first_name, last_name, 
                                sum(sales_amount) as spending,
                                TIMESTAMPDIFF(month, min(order_date), max(order_date)) as lifespan
							from dim_customers c
								join fact_sales s
									on s.customer_key = c.customer_key
							group by customer_id, first_name, last_name
                            order by 1
						   ),

	customer_status as (select *,
							case when spending > 5000 and lifespan >= 12 then "VIP"
								 when spending <= 5000 and lifespan >= 12 then "Regular"
								 when  lifespan < 12 then "New"
							end as `status`
						from customer_spending)
select `status`, count(customer_id) as total_customers
from customer_status
group by `status`
order by 2 desc;


/*==========================================================================================================================================
PERFORMACE ANALYSIS
	  -	Comparing the current value to a target values
	  - helps measure success and compare performance
===========================================================================================================================================*/

-- Analyse the yearly performance of products by comparing each product's sales to both average sales performance and previous year's sales

With performance1 as (select
					    product_name,
					    year(order_date) as order_year,
					    sum(sales_amount) as total_sales
					  from fact_sales s
					    join dim_products p
					       on s.product_key = p.product_key
					  group by product_name, year(order_date)
					  order by 1, 2),			
	 performance2 as (select*, 
						round(avg(total_sales) over(partition by product_name)) as avg_sales,
						lag(total_sales) over(partition by product_name) as prev_year_sales
					  from performance1)
select
	product_name, order_year, total_sales, avg_sales, 
	total_sales-avg_sales as diff_avg,
	case when total_sales-avg_sales > 0 then "Above Avg"
		 when total_sales-avg_sales < 0 then "Below Avg"
		 else "Avg"
	end as avg_change,
	prev_year_sales,
	total_sales-prev_year_sales as diff_sales_yearly,
	case when total_sales-prev_year_sales > 0 then "Increase"
		 when total_sales-prev_year_sales < 0 then "Decrease"
		 when prev_year_sales = null then ""
		 else "No change"
	end as prev_year_change
from performance2;



/*=========================================================================================================================================== 
PART TO WHOLE ANALYSIS (Proportional Analysis)
               - Analyse how an individual part is performing compared to the overall,
				 allowing us to understand which category has the greatest impact on the buisness
===========================================================================================================================================*/

-- Which category contribute the most to overall sales?

with category_sales as (select 
							category, SUM(sales_amount) as sales
						from fact_sales s
							join dim_products p
								on s.product_key = p.product_key
						group by category),
     total_sales as (select 
						sum(sales) as total_sale
					from category_sales)
select 
	category, sales, total_sale, 
    concat(round(sales/total_sale*100, 2), "%") as percentage_of_total
from category_sales, total_sales
order by sales desc;
